# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs
name: Frontend CI
on:
  push:
    branches: [ "dev", "main" ]
    paths: [ "frontend/**", ".github/workflows/frontend.yml" ]
  pull_request:
    branches: [ "dev", "main" ]
    paths: [ "frontend/**", ".github/workflows/frontend.yml" ]
jobs:
  build-and-test:
    #Sets up java environment with Maven for e2e testing
  
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [ 18.x, 20.x, 22.x ]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
            java-version: '21'
            distribution: 'temurin'
            cache: maven
  
      - run: mvn -B dependency:resolve --file backend/pom.xml
      - run: |
              cd backend
              mvn spring-boot:run &
              echo "Backend server started"
              # Give the server some time to start
              sleep 30
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'
      
      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci
        
      - name: Build
        working-directory: ./frontend
        run: npm run build --if-present
        
      - name: Run unit tests
        working-directory: ./frontend
        run: npm run test:unit
        
      - name: Run e2e tests
        working-directory: ./frontend
        run: npm run test:e2e

      - name: Stop backend server
        if: always()
        run: |
          # Find and kill the backend process
          kill $(lsof -t -i:8080) || true
          echo "Backend server stopped"
